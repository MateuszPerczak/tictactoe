{"version":3,"file":"static/js/829.57dbb835.chunk.js","mappings":"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","sources":["Components/Button/Button.tsx","Components/Header/Header.tsx","Components/Icon/Icon.tsx","Components/Logo/Logo.tsx","Components/Page/Page.tsx","Components/Text/Text.tsx","Components/BoardElement/BoardElement.tsx","Components/BoardIcon/BoardIcon.tsx","Components/Board/Board.tsx","Components/Game/Game.tsx","Hooks/game.ts","Pages/Play.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\r\nimport type { RefAttributes, PropsWithChildren, FC } from \"react\";\r\nimport { Link, LinkProps } from \"react-router-dom\";\r\n\r\ntype ButtonProps = PropsWithChildren<\r\n  LinkProps & RefAttributes<HTMLAnchorElement>\r\n>;\r\n\r\ntype StyledButtonProps = LinkProps & RefAttributes<HTMLAnchorElement>;\r\n\r\nconst StyledButton = styled(Link)<StyledButtonProps>`\r\n  display: flex;\r\n  gap: 5px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #fff;\r\n  backdrop-filter: blur(4px);\r\n  box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.1);\r\n  border-radius: 30px;\r\n  border: 2px solid #fff;\r\n  padding: 0.8rem 1rem;\r\n  text-decoration: none;\r\n  transition: color 200ms, background-color 200ms, transform 200ms;\r\n  &:hover {\r\n    background-color: #fff;\r\n    color: #212121;\r\n  }\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst Button: FC<ButtonProps> = ({\r\n  children,\r\n  ...rest\r\n}: ButtonProps): JSX.Element => {\r\n  return <StyledButton {...rest}>{children}</StyledButton>;\r\n};\r\n\r\nexport default Button;\r\n","import styled from \"@emotion/styled\";\r\nimport type { FC, PropsWithChildren } from \"react\";\r\n\r\ntype HeaderProps = PropsWithChildren<{\r\n  fontSize?: number;\r\n}>;\r\n\r\nconst Header: FC<HeaderProps> = styled.span<HeaderProps>`\r\n  font-size: ${({ fontSize }: HeaderProps) => {\r\n    return fontSize ? fontSize : \"1.5\";\r\n  }}rem;\r\n  font-weight: bold;\r\n  line-height: 1;\r\n`;\r\nexport default Header;\r\n","import type { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport type { DetailedHTMLProps, ElementType, HTMLAttributes } from \"react\";\r\n\r\ntype IconProps = {\r\n  fontSize?: number;\r\n  bold?: boolean;\r\n};\r\n\r\ntype IconComponent = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  } & IconProps,\r\n  DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst Icon: IconComponent = styled.span<IconProps>`\r\n  font-family: \"Segoe Fluent Icons\";\r\n  font-size: ${({ fontSize }: IconProps) => {\r\n    return fontSize ? fontSize : \"1.5\";\r\n  }}rem;\r\n  font-weight: ${({ bold }: IconProps) => {\r\n    return bold ? \"bold\" : \"normal\";\r\n  }};\r\n`;\r\n\r\nexport default Icon;\r\n","import styled, { StyledComponent } from \"@emotion/styled\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport Header from \"../Header/Header\";\r\nimport type { Theme } from \"@emotion/react\";\r\nimport type { ElementType, DetailedHTMLProps, HTMLAttributes, FC } from \"react\";\r\n\r\ntype LogoComponent = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\ntype IconComponent = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst StyledLogo: LogoComponent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst StyledIcons: IconComponent = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Logo: FC = (): JSX.Element => {\r\n  return (\r\n    <StyledLogo>\r\n      <StyledIcons>\r\n        <Icon fontSize={4}>&#xEF2C;</Icon>\r\n        <Icon fontSize={4} bold>\r\n          &#xED66;\r\n        </Icon>\r\n      </StyledIcons>\r\n      <Header fontSize={6}>TicTacToe</Header>\r\n    </StyledLogo>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import type { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\n\r\ntype PageProps = StyledComponent<\r\n  {\r\n    theme?: Theme | undefined;\r\n    as?: React.ElementType<any> | undefined;\r\n  },\r\n  React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  {}\r\n>;\r\n\r\nconst Page: PageProps = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport default Page;\r\n","import { memo, FC, PropsWithChildren } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ntype TextProps = PropsWithChildren<{\r\n  fontSize?: number;\r\n}>;\r\n\r\nconst Text: FC<TextProps> = styled.span<TextProps>`\r\n  line-height: 0.5;\r\n  padding-top: 3px;\r\n  font-size: ${({ fontSize }) => {\r\n    return fontSize ? fontSize : \"2\";\r\n  }}rem;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport default memo(Text);\r\n","import type {\r\n  ClassAttributes,\r\n  FC,\r\n  HTMLAttributes,\r\n  PropsWithChildren,\r\n} from \"react\";\r\nimport styled, { Interpolation } from \"@emotion/styled\";\r\nimport type { Theme } from \"@emotion/react\";\r\n\r\nconst StyledElement = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  transition: color 200ms, background-color 200ms;\r\n  background-color: #212121;\r\n  &:hover {\r\n    cursor: pointer;\r\n    background-color: #252525;\r\n  }\r\n  &:active {\r\n    background-color: #212121;\r\n  }\r\n`;\r\n\r\ntype ElementProps = PropsWithChildren<\r\n  ClassAttributes<HTMLDivElement> &\r\n    HTMLAttributes<HTMLDivElement> & {\r\n      css?: Interpolation<Theme>;\r\n    }\r\n>;\r\n\r\nconst BoardElement: FC<ElementProps> = ({\r\n  ...rest\r\n}: ElementProps): JSX.Element => {\r\n  return <StyledElement {...rest} />;\r\n};\r\n\r\nexport default BoardElement;\r\n","import type { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport type { DetailedHTMLProps, ElementType, HTMLAttributes } from \"react\";\r\n\r\ntype BoardIconProperties = {\r\n  bold?: boolean;\r\n};\r\n\r\ntype BoardIconComponent = StyledComponent<\r\n  {\r\n    theme?: Theme | undefined;\r\n    as?: ElementType<any> | undefined;\r\n  } & BoardIconProperties,\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  {}\r\n>;\r\n\r\nconst BoardIcon: BoardIconComponent = styled.div`\r\n  font-family: \"Segoe Fluent Icons\";\r\n  font-weight: ${({ bold }: BoardIconProperties) => {\r\n    return bold ? \"bold\" : \"normal\";\r\n  }};\r\n  font-size: 7vmin;\r\n`;\r\n\r\nexport default BoardIcon;\r\n","import styled from \"@emotion/styled\";\r\nimport type { FC } from \"react\";\r\nimport Text from \"../Text/Text\";\r\nimport BoardElement from \"../BoardElement/BoardElement\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport BoardIcon from \"../BoardIcon/BoardIcon\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst StyledBoard = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: min(40vh, 70vw);\r\n  height: min(40vh, 70vw);\r\n  border-radius: 30px;\r\n  border: 2px solid #333;\r\n  backdrop-filter: blur(8px) saturate(180%);\r\n  overflow: hidden;\r\n`;\r\n\r\nconst StyledArea = styled(animated.div)`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(3, 1fr);\r\n  gap: 2px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #333;\r\n  z-index: 1;\r\n`;\r\n\r\nconst StyledWinner = styled(animated.div)`\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 20px;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 2;\r\n`;\r\n\r\ntype BoardProps = {\r\n  board: Array<string>;\r\n  handleClick: Function;\r\n  winner: string;\r\n};\r\n\r\nconst Board: FC<BoardProps> = ({\r\n  board,\r\n  handleClick,\r\n  winner,\r\n}: BoardProps): JSX.Element => {\r\n  const playerToIcon: { [key: string]: string } = {\r\n    X: \"\\uEF2C\",\r\n    O: \"\\uED66\",\r\n    XO: \"\\uE899\",\r\n    \"\": \"\",\r\n  };\r\n\r\n  const winnerAnimation = useSpring({\r\n    opacity: `${winner === \"\" ? 0 : 1}`,\r\n    display: `${winner === \"\" ? \"none\" : \"flex\"}`,\r\n    transform: `translateY(${winner === \"\" ? \"100%\" : \"0%\"})`,\r\n  });\r\n\r\n  const boardAnimation = useSpring({\r\n    filter: `blur(${winner === \"\" ? 0 : 8}px) saturate(${\r\n      winner === \"\" ? 0 : 180\r\n    }%)`,\r\n  });\r\n  // const playerAnimation = useTransition(board, {\r\n  //   enter: { opacity: 1 },\r\n  //   keys: (item, index) => index,\r\n  //   update: (item) => {\r\n  //     return {\r\n  //       color: item === \"\" ? \"#212121\" : \"#fff\",\r\n  //     };\r\n  //   },\r\n  // });\r\n\r\n  return (\r\n    <StyledBoard>\r\n      <StyledArea style={boardAnimation}>\r\n        {/* {playerAnimation(({ opacity, color }, item, _, index) => {\r\n          console.log(item, index);\r\n          return (\r\n            <animated.div\r\n              style={{\r\n                opacity: opacity,\r\n                color: color,\r\n                backgroundColor: \"#212121\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n              onClick={() => handleClick(index)}\r\n              key={index}\r\n            >\r\n              <Icon fontSize={4} bold={item === \"O\" ? true : false}>\r\n                {playerToIcon[item]}\r\n              </Icon>\r\n            </animated.div>\r\n          );\r\n        })} */}\r\n\r\n        {board.map((player, index) => {\r\n          return (\r\n            <BoardElement key={index} onClick={() => handleClick(index)}>\r\n              <animated.div>\r\n                <BoardIcon bold={player === \"O\" ? true : false}>\r\n                  {playerToIcon[player]}\r\n                </BoardIcon>\r\n              </animated.div>\r\n            </BoardElement>\r\n          );\r\n        })}\r\n      </StyledArea>\r\n      <StyledWinner style={winnerAnimation}>\r\n        <Icon fontSize={5}>{playerToIcon[winner]}</Icon>\r\n        <Text fontSize={4}>{winner === \"XO\" ? \"Draw!\" : \"Wins!\"}</Text>\r\n      </StyledWinner>\r\n    </StyledBoard>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n\r\n// &#xED66; circle\r\n// &#xEF2C; cross\r\n","import type { FC } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Board from \"../Board/Board\";\r\nimport Button from \"../Button/Button\";\r\nimport Text from \"../Text/Text\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useSpring, animated, useTransition } from \"react-spring\";\r\nimport { updateBoard, updatePlayer, checkWinners } from \"../../Hooks/game\";\r\n\r\nconst StyledPanel = styled(animated.div)`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 10px;\r\n`;\r\n\r\nconst Game: FC = (): JSX.Element => {\r\n  const content = useSpring({\r\n    from: { transform: \"translateY(200%)\" },\r\n    to: { transform: \"translateY(0%)\" },\r\n    config: { tension: 300 },\r\n    delay: 500,\r\n  });\r\n\r\n  //\r\n\r\n  const [board, setBoard] = useState(Array(9).fill(\"\"));\r\n  const [player, setPlayer] = useState(\"X\");\r\n  const [moves, setMoves] = useState(0);\r\n  const [allowMove, setAllowMove] = useState(true);\r\n  const [winner, setWinner] = useState(\"\");\r\n\r\n  const handleClick = (index: number): void => {\r\n    if (board[index] === \"\" && allowMove) {\r\n      updateBoard(setBoard, index, player);\r\n      updatePlayer(setPlayer);\r\n      setMoves(moves + 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const winner = checkWinners(board, moves);\r\n    if (winner !== \"\") {\r\n      setAllowMove(false);\r\n      setTimeout(() => {\r\n        setWinner(winner);\r\n      }, 100);\r\n    }\r\n  }, [board, moves]);\r\n\r\n  const move: { [key: string]: number } = {\r\n    X: 0,\r\n    O: 1,\r\n  };\r\n\r\n  const animatedMove = useTransition(player, {\r\n    from: { transform: \"scale(2)\", opacity: 0 },\r\n    enter: { transform: \"scale(1)\", opacity: 1 },\r\n    leave: { transform: \"scale(0)\", opacity: 0 },\r\n    config: {\r\n      mass: 1,\r\n      tension: 550,\r\n      clamp: true,\r\n    },\r\n    keys: (item) => move[item],\r\n    exitBeforeEnter: true,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <StyledPanel style={content}>\r\n        <Text>Now</Text>\r\n        {animatedMove((style, player) => {\r\n          return (\r\n            <animated.div style={style}>\r\n              <Icon bold={player === \"O\" ? true : false}>\r\n                {player === \"X\" ? \"\\uEF2C\" : \"\\uED66\"}\r\n              </Icon>\r\n            </animated.div>\r\n          );\r\n        })}\r\n\r\n        {/* <animated.div style={{ ...animatedMove }}>\r\n          <Icon bold={player === \"O\" ? true : false}>\r\n            {player === \"X\" ? \"\\uEF2C\" : \"\\uED66\"}\r\n          </Icon>\r\n        </animated.div> */}\r\n        <Text>turn!</Text>\r\n      </StyledPanel>\r\n      <Board board={board} handleClick={handleClick} winner={winner} />\r\n      <StyledPanel>\r\n        <Button to=\"/\">\r\n          <Icon>&#xE10F;</Icon>\r\n          <Text>Back</Text>\r\n        </Button>\r\n        <Button\r\n          to=\"\"\r\n          onClick={() => {\r\n            setPlayer(\"X\");\r\n            setWinner(\"\");\r\n            setMoves(0);\r\n            setAllowMove(true);\r\n            setBoard(Array(9).fill(\"\"));\r\n          }}\r\n        >\r\n          <Icon>&#xE72C;</Icon>\r\n          <Text>Restart</Text>\r\n        </Button>\r\n      </StyledPanel>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","export const updateBoard = (\r\n  setBoard: Function,\r\n  index: number,\r\n  player: string\r\n): void => {\r\n  setBoard((board: Array<string>) => {\r\n    const newBoard = [...board];\r\n    newBoard[index] = player;\r\n    return newBoard;\r\n  });\r\n};\r\n\r\nexport const updatePlayer = (setPlayer: Function): void => {\r\n  setPlayer((player: string) => {\r\n    return player === \"X\" ? \"O\" : \"X\";\r\n  });\r\n};\r\n\r\nexport const checkWinners = (board: Array<string>, moves: number): string => {\r\n  const winningCombinations: Array<Array<number>> = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (const combination of winningCombinations) {\r\n    const [a, b, c] = combination;\r\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n      return board[a];\r\n    }\r\n  }\r\n  return moves === 9 ? \"XO\" : \"\";\r\n};\r\n","import type { FC } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Page from \"../Components/Page/Page\";\r\nimport Logo from \"../Components/Logo/Logo\";\r\nimport Game from \"../Components/Game/Game\";\r\n\r\nconst Play: FC = (): JSX.Element => {\r\n  const header = useSpring({\r\n    from: { opacity: 0, transform: \"scale(2)\" },\r\n    to: { opacity: 1, transform: \"scale(1)\" },\r\n    config: { tension: 400 },\r\n    delay: 200,\r\n  });\r\n\r\n  return (\r\n    <Page>\r\n      <animated.div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          gap: \"10px\",\r\n          ...header,\r\n        }}\r\n      >\r\n        <Logo />\r\n        <Game />\r\n      </animated.div>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Play;\r\n"],"names":["StyledButton","styled","Link","children","rest","Header","fontSize","Icon","bold","StyledLogo","StyledIcons","Page","Text","memo","StyledElement","StyledBoard","StyledArea","animated","StyledWinner","board","handleClick","winner","playerToIcon","X","O","XO","winnerAnimation","useSpring","opacity","display","transform","boardAnimation","filter","style","map","player","index","onClick","StyledPanel","content","from","to","config","tension","delay","useState","Array","fill","setBoard","setPlayer","moves","setMoves","allowMove","setAllowMove","setWinner","useEffect","combination","a","b","c","checkWinners","setTimeout","move","animatedMove","useTransition","enter","leave","mass","clamp","keys","item","exitBeforeEnter","newBoard","updateBoard","updatePlayer","Button","header","flexDirection","alignItems","gap","Logo"],"sourceRoot":""}