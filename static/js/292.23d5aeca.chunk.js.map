{"version":3,"file":"static/js/292.23d5aeca.chunk.js","mappings":"0LAUMA,GAAeC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,yeA6BlB,IAPgC,SAAC,GAGA,IAF/BE,EAE8B,EAF9BA,SACGC,GAC2B,YAC9B,OAAO,SAACJ,GAAD,kBAAkBI,GAAlB,aAAyBD,O,oCC7B5BE,E,QAA0BJ,EAAAA,KAAH,uFACd,YAAgC,IAA7BK,EAA4B,EAA5BA,SACd,OAAOA,GAAsB,SAKjC,O,oCCIMC,E,QAAsBN,EAAAA,KAAH,yGAEV,YAA8B,IAA3BK,EAA0B,EAA1BA,SACd,OAAOA,GAAsB,SAEhB,YACb,OADsC,EAAtBE,KACF,OAAS,YAI3B,O,6ECJMC,EAA4BR,EAAAA,EAAAA,IAAH,yHAOzBS,EAA6BT,EAAAA,EAAAA,IAAH,gFAoBhC,IAdiB,WACf,OACE,UAACQ,EAAD,YACE,UAACC,EAAD,YACE,SAAC,IAAD,CAAMJ,SAAU,EAAhB,qBACA,SAAC,IAAD,CAAMA,SAAU,EAAGE,MAAI,EAAvB,wBAIF,SAAC,IAAD,CAAQF,SAAU,EAAlB,4B,uDC3CAK,EAAaV,EAAAA,EAAAA,IAAH,+KAgBhB,IAJ4B,SAAC,GAA0C,IAAxCE,EAAuC,EAAvCA,SAC7B,OAAO,SAACQ,EAAD,UAAaR,M,8CCThBS,E,QAAsBX,EAAAA,KAAH,oHAGV,YAAmB,IAAhBK,EAAe,EAAfA,SACd,OAAOA,GAAsB,OAKjC,KAAeO,EAAAA,EAAAA,MAAKD,I,8GCoCpB,UA5CiB,WACf,IAAME,GAASC,EAAAA,EAAAA,WAAU,CACvBC,KAAM,CAAEC,QAAS,EAAGC,UAAW,eAC/BC,GAAI,CAAEF,QAAS,EAAGC,UAAW,YAC7BE,OAAQ,CAAEC,QAAS,KACnBC,MAAO,MAGHC,GAAUR,EAAAA,EAAAA,WAAU,CACxBC,KAAM,CAAEC,QAAS,EAAGC,UAAW,aAAcM,OAAQ,OACrDL,GAAI,CAAEF,QAAS,EAAGC,UAAW,WAAYM,OAAQ,SACjDJ,OAAQ,CAAEC,QAAS,KACnBC,MAAO,MAGT,OACE,UAAC,IAAD,YACE,SAAC,EAAAG,SAAA,IAAD,CAAcC,MAAOZ,EAArB,UACE,SAAC,IAAD,OAEF,UAAC,EAAAW,SAAA,IAAD,CACEC,OAAK,QACHC,QAAS,OACTC,cAAe,SACfC,IAAK,QACFN,GALP,WAQE,UAAC,IAAD,CAAQJ,GAAG,QAAX,WACE,SAAC,IAAD,sBACA,SAAC,IAAD,uBAEF,UAAC,IAAD,CAAQA,GAAG,SAAX,WACE,SAAC,IAAD,sBACA,SAAC,IAAD,2BAGJ,SAAC,EAAAM,SAAA,IAAD,CAAcC,MAAOZ,EAArB,UACE,SAAC,IAAD","sources":["Components/Button/Button.tsx","Components/Header/Header.tsx","Components/Icon/Icon.tsx","Components/Logo/Logo.tsx","Components/Page/Page.tsx","Components/Text/Text.tsx","Pages/Main.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\r\nimport type { RefAttributes, PropsWithChildren, FC } from \"react\";\r\nimport { Link, LinkProps } from \"react-router-dom\";\r\n\r\ntype ButtonProps = PropsWithChildren<\r\n  LinkProps & RefAttributes<HTMLAnchorElement>\r\n>;\r\n\r\ntype StyledButtonProps = LinkProps & RefAttributes<HTMLAnchorElement>;\r\n\r\nconst StyledButton = styled(Link)<StyledButtonProps>`\r\n  display: flex;\r\n  gap: 5px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #fff;\r\n  backdrop-filter: blur(4px);\r\n  box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.1);\r\n  border-radius: 30px;\r\n  border: 2px solid #fff;\r\n  padding: 0.8rem 1rem;\r\n  text-decoration: none;\r\n  transition: color 200ms, background-color 200ms, transform 200ms;\r\n  &:hover {\r\n    background-color: #fff;\r\n    color: #212121;\r\n  }\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst Button: FC<ButtonProps> = ({\r\n  children,\r\n  ...rest\r\n}: ButtonProps): JSX.Element => {\r\n  return <StyledButton {...rest}>{children}</StyledButton>;\r\n};\r\n\r\nexport default Button;\r\n","import styled from \"@emotion/styled\";\r\nimport type { FC, PropsWithChildren } from \"react\";\r\n\r\ntype HeaderProps = PropsWithChildren<{\r\n  fontSize?: number;\r\n}>;\r\n\r\nconst Header: FC<HeaderProps> = styled.span<HeaderProps>`\r\n  font-size: ${({ fontSize }: HeaderProps) => {\r\n    return fontSize ? fontSize : \"1.5\";\r\n  }}rem;\r\n  font-weight: bold;\r\n  line-height: 1;\r\n`;\r\nexport default Header;\r\n","import type { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport type { DetailedHTMLProps, ElementType, HTMLAttributes } from \"react\";\r\n\r\ntype IconProps = {\r\n  fontSize?: number;\r\n  bold?: boolean;\r\n};\r\n\r\ntype IconComponent = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  } & IconProps,\r\n  DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst Icon: IconComponent = styled.span<IconProps>`\r\n  font-family: \"Segoe Fluent Icons\";\r\n  font-size: ${({ fontSize }: IconProps) => {\r\n    return fontSize ? fontSize : \"1.5\";\r\n  }}rem;\r\n  font-weight: ${({ bold }: IconProps) => {\r\n    return bold ? \"bold\" : \"normal\";\r\n  }};\r\n`;\r\n\r\nexport default Icon;\r\n","import styled, { StyledComponent } from \"@emotion/styled\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport Header from \"../Header/Header\";\r\nimport type { Theme } from \"@emotion/react\";\r\nimport type { ElementType, DetailedHTMLProps, HTMLAttributes, FC } from \"react\";\r\n\r\ntype LogoComponent = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\ntype IconComponent = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst StyledLogo: LogoComponent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst StyledIcons: IconComponent = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Logo: FC = (): JSX.Element => {\r\n  return (\r\n    <StyledLogo>\r\n      <StyledIcons>\r\n        <Icon fontSize={4}>&#xEF2C;</Icon>\r\n        <Icon fontSize={4} bold>\r\n          &#xED66;\r\n        </Icon>\r\n      </StyledIcons>\r\n      <Header fontSize={6}>TicTacToe</Header>\r\n    </StyledLogo>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import styled from \"@emotion/styled\";\r\nimport type { FC, PropsWithChildren } from \"react\";\r\n\r\nconst StyledPage = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n`;\r\n\r\ntype PageProps = PropsWithChildren<Record<string, unknown>>;\r\n\r\nconst Page: FC<PageProps> = ({ children }: PageProps): JSX.Element => {\r\n  return <StyledPage>{children}</StyledPage>;\r\n};\r\n\r\nexport default Page;\r\n","import { memo, FC, PropsWithChildren } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ntype TextProps = PropsWithChildren<{\r\n  fontSize?: number;\r\n}>;\r\n\r\nconst Text: FC<TextProps> = styled.span<TextProps>`\r\n  line-height: 0.5;\r\n  padding-top: 3px;\r\n  font-size: ${({ fontSize }) => {\r\n    return fontSize ? fontSize : \"2\";\r\n  }}rem;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport default memo(Text);\r\n","import type { FC } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Page from \"../Components/Page/Page\";\r\nimport Logo from \"../Components/Logo/Logo\";\r\nimport Button from \"../Components/Button/Button\";\r\nimport Icon from \"../Components/Icon/Icon\";\r\nimport Text from \"../Components/Text/Text\";\r\n\r\nconst Main: FC = (): JSX.Element => {\r\n  const header = useSpring({\r\n    from: { opacity: 0, transform: \"scale(0.94)\" },\r\n    to: { opacity: 1, transform: \"scale(1)\" },\r\n    config: { tension: 400 },\r\n    delay: 200,\r\n  });\r\n\r\n  const content = useSpring({\r\n    from: { opacity: 0, transform: \"scale(0.9)\", height: \"0px\" },\r\n    to: { opacity: 1, transform: \"scale(1)\", height: \"140px\" },\r\n    config: { tension: 200 },\r\n    delay: 600,\r\n  });\r\n\r\n  return (\r\n    <Page>\r\n      <animated.div style={header}>\r\n        <Logo />\r\n      </animated.div>\r\n      <animated.div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          gap: \"10px\",\r\n          ...content,\r\n        }}\r\n      >\r\n        <Button to=\"/play\">\r\n          <Icon>&#xE102;</Icon>\r\n          <Text>Play</Text>\r\n        </Button>\r\n        <Button to=\"/about\">\r\n          <Icon>&#xE946;</Icon>\r\n          <Text>About</Text>\r\n        </Button>\r\n      </animated.div>\r\n      <animated.div style={header}>\r\n        <Text>By: Mateusz Perczak</Text>\r\n      </animated.div>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"],"names":["StyledButton","styled","Link","children","rest","Header","fontSize","Icon","bold","StyledLogo","StyledIcons","StyledPage","Text","memo","header","useSpring","from","opacity","transform","to","config","tension","delay","content","height","animated","style","display","flexDirection","gap"],"sourceRoot":""}